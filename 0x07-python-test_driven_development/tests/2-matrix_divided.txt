==========================================
Python Test Cases for 2-matrix_divided.txt
==========================================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]

Test 1
======
>>> print(matrix_divided(matrix, 3)) # doctest: +NORMALIZE_WHITESPACE
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test 2
======
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

Test 3
======
>>> print(matrix_divided(matrix, "string")) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: div must be a number

Test 4
======
>>> print(matrix_divided(matrix, None)) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: div must be a number

Test 5
======
>>> print(matrix_divided(matrix, 1000)) # doctest: +ELLIPSIS
[[0.0, 0.0, 0.0], [0.0, 0.01, 0.01]]

Test 6
======
>>> print(matrix_divided(matrix, 0)) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Test 7
======
>>> print(matrix_divided(matrix, 0.00000)) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Test 8
======
>>> print(matrix_divided(matrix, 0.2)) # doctest: +ELLIPSIS
[[5.0, 10.0, 15.0], [20.0, 25.0, 30.0]]

>>> matrix = [
...     [1, "string", 3],
...     [4, 5, 6]
... ]

test 9
======
>>> print(matrix_divided(matrix, 0.00000)) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [
...     [1, None, 3],
...     [4, 5, 6]
... ]

test 10
======
>>> print(matrix_divided(matrix, 0.00000)) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6, 8, 9]
... ]

test 11
======
>>> print(matrix_divided(matrix, 0.00000)) # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
